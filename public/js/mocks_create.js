(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/chrisls/dev/common-ui/mockingbird/src/jsx/MocksCreate.jsx":[function(require,module,exports){
(function (global){
var React = (typeof window !== "undefined" ? window['React'] : typeof global !== "undefined" ? global['React'] : null);
var $ = (typeof window !== "undefined" ? window['$'] : typeof global !== "undefined" ? global['$'] : null);

var MocksCreate = React.createClass({displayName: "MocksCreate",

    getInitialState: function() {
        return {
            error: false,
            created: false,
            createdMock: null
        };
    },

    postForm: function() {

        if (!(this.refs.name.value && this.refs.responseData.value)) {
            this.setState({ error: true });
            return;
        }

        var responseCode = $('input[name=responseCode]:checked').val();
        var responseMethod = $('input[name=responseMethod]:checked').val();

        var data = {
            "name": this.refs.name.value,
            "description": this.refs.description.value,
            "author": this.refs.author.value,
            "componentName": this.refs.componentName.value,
            "responseData": this.refs.responseData.value,
            "componentProduct": this.refs.componentProduct.value,
            "responseCode": responseCode,
            "responseMethod": responseMethod
        };

        $.ajax({
            type: 'POST',
            url: '/api/mock',
            data: data,
            dataType: 'json',
            success: function(response){
                this.setState({
                    created: true,
                    createdMock: response.result
                });
            }.bind(this)
        });
    },

    cancelForm: function() {
        window.location = this.props.context_root + '/mocks';
    },

    render: function() {

        if (this.state.created) {
            return (
                React.createElement("div", {className: "container"}, 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-12-12"}, 
                            React.createElement("h1", null, "Success!"), 
                            React.createElement("p", null, "We've created a mock api endpoint for you!"), 
                            React.createElement("hr", null), 
                            React.createElement("p", null, "To access the endpoint, visit the URL below:"), 
                            React.createElement("p", null, 
                                React.createElement("a", {href: this.props.context_root + '/mockapi/mock/' + this.state.createdMock._id}, 
                                    this.props.context_root, "/mockapi/mock/", this.state.createdMock._id
                                )
                            ), 
                            React.createElement("p", null, "OR"), 
                            React.createElement("p", null, "Hit it with a ", this.state.createdMock.response.method, " request from your app."), 
                            React.createElement("hr", null), 
                            React.createElement("h4", null, "IMPORTANT"), 
                            React.createElement("p", null, React.createElement("strong", null, "NEVER"), " ever ever rely on this endpoint for production applications. Consider it volatile."), 
                            React.createElement("hr", null), 
                            React.createElement("a", {href: this.props.context_root + '/mocks'}, React.createElement("button", {className: "btn btn-primary"}, "Back to List")), "Â ", 
                            React.createElement("a", {href: this.props.context_root + '/mocks/edit/' + this.state.createdMock._id}, React.createElement("button", {className: "btn btn-success"}, "Edit this Mock"))
                        )
                    )
                )
            );
        } else {
            var error = "";
            if (this.state.error) {
                error = React.createElement("span", null, "You must complete all required fields");
            }

            var defaultJSON = {
                "code": 200,
                "status": "success",
                "message": "The call succeeded"
            };

            return (
                React.createElement("div", {className: "container"}, 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-12"}, 
                            React.createElement("h1", null, "Create new mock"), 
                            React.createElement("hr", null)
                        )
                    ), 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-6"}, 
                            React.createElement("h3", null, "Basics"), 
                            React.createElement("p", null, "Enter some identifying information"), 
                            React.createElement("div", {className: "form-group"}, 
                                React.createElement("label", {htmlFor: "mockName"}, "Name"), 
                                React.createElement("input", {type: "text", className: "form-control", id: "mockName", placeholder: "Name (REQUIRED)", ref: "name", name: "name", required: true})
                            ), 
                            React.createElement("div", {className: "form-group"}, 
                                React.createElement("label", {htmlFor: "mockDescription"}, "Description"), 
                                React.createElement("input", {type: "text", className: "form-control", id: "mockDescription", placeholder: "Description", ref: "description", name: "description"})
                            ), 
                            React.createElement("div", {className: "form-group"}, 
                                React.createElement("label", {htmlFor: "mockAuthor"}, "Author Email"), 
                                React.createElement("input", {type: "text", className: "form-control", id: "mockAuthor", placeholder: "Author Email", ref: "author", name: "author"})
                            )
                        ), 
                        React.createElement("div", {className: "col-md-6"}, 
                            React.createElement("h3", null, "Component Info"), 
                            React.createElement("p", null, "Enter some information about the component this data is going to be used for"), 
                            React.createElement("div", {className: "form-group"}, 
                                React.createElement("label", {htmlFor: "mockComponentName"}, "Component Name"), 
                                React.createElement("input", {type: "text", className: "form-control", id: "mockComponentName", placeholder: "Component Name", ref: "componentName", name: "componentName"})
                            ), 
                            React.createElement("div", {className: "form-group"}, 
                                React.createElement("label", {htmlFor: "mockComponentProduct"}, "Product"), 
                                React.createElement("input", {type: "text", className: "form-control", id: "mockComponentProduct", placeholder: "Product Name", ref: "componentProduct", name: "componentProduct"})
                            )
                        )
                    ), 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-12"}, 
                            React.createElement("h3", null, "Base Response Data"), 
                            React.createElement("p", null, "Enter ", React.createElement("strong", null, "VALID"), " JSON below. This is the data that your endpoint will return as a JSON response."), 
                            React.createElement("p", null, "Note: Current lack of a validator will cause your request to fail."), 
                            React.createElement("div", {className: "form-group"}, 
                                React.createElement("label", {htmlFor: "mockResponseData"}, "Response Data (REQUIRED)"), 
                                React.createElement("textarea", {className: "form-control json-field-edit", id: "mockResponseData", placeholder: "Enter valid JSON here", ref: "responseData", name: "responseData", defaultValue: JSON.stringify(defaultJSON)}
                                )
                            )
                        )
                    ), 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-6"}, 
                            React.createElement("h4", null, "Mock Response Code"), 
                            React.createElement("p", null, "Choose a response code to return"), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response200", value: "200", defaultChecked: "true"}), " 200"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response201", value: "201"}), " 201"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response202", value: "202"}), " 202"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response203", value: "203"}), " 203"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response204", value: "204"}), " 204"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response205", value: "205"}), " 205"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response206", value: "206"}), " 206"
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response300", value: "300"}), " 300"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response301", value: "301"}), " 301"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response302", value: "302"}), " 302"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response303", value: "303"}), " 303"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response304", value: "304"}), " 304"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response305", value: "305"}), " 305"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response307", value: "307"}), " 307"
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response400", value: "400"}), " 400"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response401", value: "401"}), " 401"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response403", value: "403"}), " 403"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response404", value: "404"}), " 404"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response405", value: "405"}), " 405"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response407", value: "407"}), " 407"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response408", value: "408"}), " 408"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response409", value: "409"}), " 409"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response410", value: "410"}), " 410"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response411", value: "411"}), " 411"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response412", value: "412"}), " 412"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response413", value: "413"}), " 413"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response414", value: "414"}), " 414"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response415", value: "415"}), " 415"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response416", value: "416"}), " 416"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response417", value: "417"}), " 417"
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response500", value: "500"}), " 500"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response501", value: "501"}), " 501"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response503", value: "503"}), " 503"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response504", value: "504"}), " 504"
                                    ), 
                                    React.createElement("label", {className: "inline-radio"}, 
                                      React.createElement("input", {name: "responseCode", type: "radio", id: "response505", value: "505"}), " 505"
                                    )
                                )
                            )
                        ), 
                        React.createElement("div", {className: "col-md-6"}, 
                            React.createElement("h4", null, "Mock Response Method"), 
                            React.createElement("label", {className: "inline-radio"}, 
                              React.createElement("input", {name: "responseMethod", type: "radio", id: "responseGET", value: "GET", defaultChecked: "true"}), " GET"
                            ), 
                            React.createElement("label", {className: "inline-radio"}, 
                              React.createElement("input", {name: "responseMethod", type: "radio", id: "responsePOST", value: "POST"}), " POST"
                            ), 
                            React.createElement("label", {className: "inline-radio"}, 
                              React.createElement("input", {name: "responseMethod", type: "radio", id: "responsePUT", value: "PUT"}), " PUT"
                            ), 
                            React.createElement("label", {className: "inline-radio"}, 
                              React.createElement("input", {name: "responseMethod", type: "radio", id: "responsePATCH", value: "PATCH"}), " PATCH"
                            ), 
                            React.createElement("label", {className: "inline-radio"}, 
                              React.createElement("input", {name: "responseMethod", type: "radio", id: "responseOPTIONS", value: "OPTIONS"}), " OPTIONS"
                            ), 
                            React.createElement("label", {className: "inline-radio"}, 
                              React.createElement("input", {name: "responseMethod", type: "radio", id: "responseDELETE", value: "DELETE"}), " DELETE"
                            ), 
                            React.createElement("br", null), 
                            React.createElement("h4", null, "Mock Response Delay (ms)"), 
                            React.createElement("p", null, React.createElement("em", null, "Currently not available"))
                        )
                    ), 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-12"}, 
                            React.createElement("hr", null), 
                            React.createElement("button", {onClick: this.postForm, type: "submit", className: "btn btn-primary"}, "Create"), " Â ", 
                            React.createElement("button", {onClick: this.cancelForm, type: "submit", className: "btn btn-secondary"}, "Cancel"), " ", error
                        )
                    )
                )
            );
        }
    }
});

module.exports = MocksCreate;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/chrisls/dev/common-ui/mockingbird/src/mocks_create.js":[function(require,module,exports){
var MocksCreate = require('./jsx/MocksCreate.jsx');

var mocks = React.createElement(MocksCreate ,{ "context_root": CONTEXT_ROOT.innerHTML });
ReactDOM.render(mocks, document.getElementById('reactContainer'));

},{"./jsx/MocksCreate.jsx":"/Users/chrisls/dev/common-ui/mockingbird/src/jsx/MocksCreate.jsx"}]},{},["/Users/chrisls/dev/common-ui/mockingbird/src/mocks_create.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
